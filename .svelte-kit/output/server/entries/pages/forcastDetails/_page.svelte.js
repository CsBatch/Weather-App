import { c as create_ssr_component, e as escape, f as each, b as add_attribute } from "../../../chunks/ssr.js";
const css = {
  code: ".container.svelte-sw4uo1.svelte-sw4uo1{grid-template-columns:repeat(3, 1fr);gap:20px;width:100vw}@media(max-width: 800px){.container.svelte-sw4uo1.svelte-sw4uo1{grid-template-columns:repeat(2, 1fr)}}@media(max-width: 500px){.container.svelte-sw4uo1.svelte-sw4uo1{grid-template-columns:1fr}}.glassEffect.svelte-sw4uo1.svelte-sw4uo1{border-radius:20px;backdrop-filter:blur(3px);background-color:rgba(0, 0, 0, 0.495);color:white;box-shadow:0px 0px 10px 5px rgba(96, 96, 96, 0.837)}.temperatureData.svelte-sw4uo1.svelte-sw4uo1{display:grid;justify-items:center;padding:20px;width:100%;height:250px;margin-bottom:1.5rem}.areainfo.svelte-sw4uo1.svelte-sw4uo1{display:flex;justify-content:space-between;width:100%;font-weight:bold;font-size:1.2rem}.temperature.svelte-sw4uo1.svelte-sw4uo1{font-size:6rem}.temperature.svelte-sw4uo1 small.svelte-sw4uo1{font-size:2rem}.dayInfo.svelte-sw4uo1.svelte-sw4uo1{display:flex;justify-content:space-between;width:100%;font-weight:bold;font-size:1.2rem}.table.svelte-sw4uo1.svelte-sw4uo1{width:100%;text-align:center;min-height:350px}.section-1.svelte-sw4uo1 table.svelte-sw4uo1{width:100%}.table.svelte-sw4uo1 th.svelte-sw4uo1,.table.svelte-sw4uo1 td.svelte-sw4uo1{text-align:center;border:none;padding:10px}.otherData.svelte-sw4uo1.svelte-sw4uo1{display:grid;grid-template-columns:repeat(2, 1fr);gap:1em}.datacard.svelte-sw4uo1.svelte-sw4uo1{width:210px;min-height:130px;padding:10px}h4.svelte-sw4uo1.svelte-sw4uo1{font-size:1.5rem;font-weight:bold}.data.svelte-sw4uo1.svelte-sw4uo1{font-size:2rem;font-weight:bold}.data.svelte-sw4uo1 small.svelte-sw4uo1{font-size:1rem}.container.svelte-sw4uo1 .section-3 .table.svelte-sw4uo1{width:100%;max-height:400px;overflow-y:scroll}.container.svelte-sw4uo1 .section-3 .table tbody.svelte-sw4uo1{display:block;max-height:600px;overflow-y:scroll;-ms-overflow-style:none;scrollbar-width:none}.container.svelte-sw4uo1 .section-3 .table tbody .svelte-sw4uo1::-webkit-scrollbar{display:none}.container.svelte-sw4uo1 .section-3 .table thead.svelte-sw4uo1,.container.svelte-sw4uo1 .section-3 .table tbody tr.svelte-sw4uo1{display:table;width:100%;table-layout:fixed}.circular-clock.svelte-sw4uo1.svelte-sw4uo1{width:150px;height:150px;display:block;margin:0 auto}.circular-compass.svelte-sw4uo1.svelte-sw4uo1{width:150px;height:150px;display:block;margin:0 auto}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\r\\n  // @ts-ignore\\r\\n  export let data;\\r\\n  let { weatherData, error } = data;\\r\\n\\r\\n  const weekDay = [\\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\"];\\r\\n  const monthNames = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"];\\r\\n\\r\\n  // Format date to display in table\\r\\n  // @ts-ignore\\r\\n  function formatDate(date) {\\r\\n    const day = date.slice(8);\\r\\n    const month = monthNames[new Date(date).getMonth()];\\r\\n    return \`\${day} \${month}\`;\\r\\n  }\\r\\n\\r\\n  // Extract day of the week\\r\\n  // @ts-ignore\\r\\n  function getDayOfWeek(date) {\\r\\n    return weekDay[new Date(date).getDay()];\\r\\n  }\\r\\n\\r\\n let hours = 0;\\r\\n  let minutes = 0;\\r\\n  let seconds = 0;\\r\\n\\r\\n  // Function to format the time with leading zero\\r\\n  // @ts-ignore\\r\\n  function formatTime(number) {\\r\\n    return number.toString().padStart(2, '0');\\r\\n  }\\r\\n\\r\\n  const updateClock = () => {\\r\\n    const now = new Date();\\r\\n    hours = formatTime(now.getHours() % 12 || 12); // Keep 12-hour format and avoid showing \\"0\\"\\r\\n    minutes = formatTime(now.getMinutes());\\r\\n    seconds = formatTime(now.getSeconds());\\r\\n  };\\r\\n\\r\\n  setInterval(updateClock, 1000);\\r\\n  updateClock(); // Initialize clock immediately\\r\\n\\r\\n  let windDirection = 0;\\r\\n\\r\\n  // @ts-ignore\\r\\n  function getWindDirectionAngle(direction) {\\r\\n    const directions = {\\r\\n      'N': 0, 'NNE': 22.5, 'NE': 45, 'ENE': 67.5,\\r\\n      'E': 90, 'ESE': 112.5, 'SE': 135, 'SSE': 157.5,\\r\\n      'S': 180, 'SSW': 202.5, 'SW': 225, 'WSW': 247.5,\\r\\n      'W': 270, 'WNW': 292.5, 'NW': 315, 'NNW': 337.5\\r\\n    };\\r\\n    // @ts-ignore\\r\\n    return directions[direction] || 0;  // Default to North if unknown\\r\\n  }\\r\\n\\r\\n  // @ts-ignore\\r\\n  $: windDirection = getWindDirectionAngle(weatherData.current.wind_dir);\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"container\\">\\r\\n  {#if error}\\r\\n    <p>{error}</p>\\r\\n  {:else}\\r\\n    <div class=\\"section-1\\">\\r\\n      <div class=\\"temperatureData glassEffect\\">\\r\\n        <div class=\\"areainfo\\">\\r\\n          <span class=\\"location\\">{weatherData.location.name}, {weatherData.location.country}</span>\\r\\n          <span class=\\"date\\">{getDayOfWeek(weatherData.forecast.forecastday[0].date)}</span>\\r\\n        </div>\\r\\n\\r\\n        <h1 class=\\"temperature\\">{weatherData.current.temp_c} <small>°C</small></h1>\\r\\n\\r\\n        <div class=\\"dayInfo\\">\\r\\n          <span>{weatherData.current.is_day ? \\"Day\\" : \\"Night\\"}</span>\\r\\n          <span class=\\"condition\\">{weatherData.current.condition.text}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Forecast Table -->\\r\\n      <table class=\\"table forecast-table glassEffect\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th>Date</th>\\r\\n            <th>Temp</th>\\r\\n            <th>Sunrise</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          {#each weatherData.forecast.forecastday as day}\\r\\n            <tr>\\r\\n              <td>{formatDate(day.date)}</td>\\r\\n              <td>{day.day.avgtemp_c}°C</td>\\r\\n              <td>{day.astro.sunrise}</td>\\r\\n            </tr>\\r\\n          {/each}\\r\\n        </tbody>\\r\\n      </table>\\r\\n    </div>\\r\\n\\r\\n    <!-- Hourly Table -->\\r\\n    <div class=\\"section-3\\">\\r\\n      <table class=\\"table forecast-table glassEffect\\">\\r\\n        <thead>\\r\\n          <tr>\\r\\n            <th>Time</th>\\r\\n            <th>Temp</th>\\r\\n            <th colspan=\\"2\\">Condition</th>\\r\\n          </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n          {#each weatherData.forecast.forecastday[0].hour as hour}\\r\\n            <tr>\\r\\n              <td>{hour.time.slice(11)}</td>\\r\\n              <td>{hour.temp_c}°C</td>\\r\\n              <td colspan=\\"2\\" >{hour.condition.text}</td>\\r\\n            </tr>\\r\\n          {/each}\\r\\n        </tbody>\\r\\n      </table>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\"section-2\\">\\r\\n      <div class=\\"otherData\\">\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <div class=\\"clock\\">\\r\\n            <h4>{hours} : {minutes} : {seconds}</h4>\\r\\n            <svg viewBox=\\"0 0 100 100\\" class=\\"circular-clock\\">\\r\\n              <!-- Outer circle -->\\r\\n              <circle cx=\\"50\\" cy=\\"50\\" r=\\"45\\" stroke-width=\\"5\\" fill=\\"none\\" stroke=\\"white\\"></circle>\\r\\n        \\r\\n              <!-- Hour hand -->\\r\\n              <line\\r\\n                x1=\\"50\\" y1=\\"50\\"\\r\\n                x2=\\"{50 + 20 * Math.sin(hours * 30 * Math.PI / 180)}\\"\\r\\n                y2=\\"{50 - 20 * Math.cos(hours * 30 * Math.PI / 180)}\\"\\r\\n                stroke=\\"white\\" stroke-width=\\"3\\" />\\r\\n        \\r\\n              <!-- Minute hand -->\\r\\n              <line\\r\\n                x1=\\"50\\" y1=\\"50\\"\\r\\n                x2=\\"{50 + 30 * Math.sin(minutes * 6 * Math.PI / 180)}\\"\\r\\n                y2=\\"{50 - 30 * Math.cos(minutes * 6 * Math.PI / 180)}\\"\\r\\n                stroke=\\"white\\" stroke-width=\\"2\\" />\\r\\n        \\r\\n              <!-- Second hand -->\\r\\n              <line\\r\\n                x1=\\"50\\" y1=\\"50\\"\\r\\n                x2=\\"{50 + 40 * Math.sin(seconds * 6 * Math.PI / 180)}\\"\\r\\n                y2=\\"{50 - 40 * Math.cos(seconds * 6 * Math.PI / 180)}\\"\\r\\n                stroke=\\"red\\" stroke-width=\\"1\\" />\\r\\n        \\r\\n              <!-- Center point -->\\r\\n              <circle cx=\\"50\\" cy=\\"50\\" r=\\"2\\" fill=\\"red\\"></circle>\\r\\n            </svg>\\r\\n          </div>\\r\\n        </div>\\r\\n        \\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <div class=\\"compass\\">\\r\\n            <h4>Wind Direction</h4>\\r\\n            <svg viewBox=\\"0 0 100 100\\" class=\\"circular-compass\\">\\r\\n              <!-- Outer circle (compass frame) -->\\r\\n              <circle cx=\\"50\\" cy=\\"50\\" r=\\"45\\" stroke-width=\\"5\\" fill=\\"none\\" stroke=\\"white\\"></circle>\\r\\n        \\r\\n              <!-- Compass directions -->\\r\\n              <text x=\\"50\\" y=\\"15\\" text-anchor=\\"middle\\" fill=\\"white\\" font-size=\\"8\\">N</text>\\r\\n              <text x=\\"85\\" y=\\"55\\" text-anchor=\\"middle\\" fill=\\"white\\" font-size=\\"8\\">E</text>\\r\\n              <text x=\\"50\\" y=\\"95\\" text-anchor=\\"middle\\" fill=\\"white\\" font-size=\\"8\\">S</text>\\r\\n              <text x=\\"15\\" y=\\"55\\" text-anchor=\\"middle\\" fill=\\"white\\" font-size=\\"8\\">W</text>\\r\\n        \\r\\n              <!-- Needle -->\\r\\n              <line\\r\\n                x1=\\"50\\" y1=\\"50\\"\\r\\n                x2=\\"50\\" y2=\\"15\\"\\r\\n                stroke=\\"red\\" stroke-width=\\"2\\"\\r\\n                transform=\\"rotate({windDirection} 50 50)\\" />\\r\\n        \\r\\n              <!-- Center point -->\\r\\n              <circle cx=\\"50\\" cy=\\"50\\" r=\\"2\\" fill=\\"red\\"></circle>\\r\\n            </svg>\\r\\n          </div>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Wind Speed & Direction -->\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <div class=\\"wind\\">\\r\\n            <h4>Wind Speed</h4>\\r\\n            <span class=\\"data\\">{weatherData.current.wind_kph} <small>km/h</small></span>\\r\\n          </div>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Humidity -->\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <h4>Humidity</h4>\\r\\n          <span class=\\"data\\">{weatherData.current.humidity}<small>%</small></span>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Visibility -->\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <h4>Visibility</h4>\\r\\n          <span class=\\"data\\">{weatherData.current.vis_km} <small>km</small></span>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Precipitation -->\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <h4>Precipitation</h4>\\r\\n          <span class=\\"data\\">{weatherData.current.precip_mm} <small>mm</small></span>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Pressure -->\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <h4>Pressure</h4>\\r\\n          <span class=\\"data\\">{weatherData.current.pressure_mb} <small>mb</small></span>\\r\\n        </div>\\r\\n\\r\\n        <!-- Sunrise and Sunset -->\\r\\n        <div class=\\"datacard text-center glassEffect\\">\\r\\n          <h4>🌤️Sunrise</h4>\\r\\n          <span class=\\"data\\">{weatherData.forecast.forecastday[0].astro.sunrise.slice(0, 5)} <small>{weatherData.forecast.forecastday[0].astro.sunrise.slice(5)}</small></span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  {/if}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n  .container {\\r\\n    /* display: grid; */\\r\\n    grid-template-columns: repeat(3, 1fr);\\r\\n    gap: 20px;\\r\\n    width: 100vw;\\r\\n  }\\r\\n\\r\\n  @media (max-width: 800px) {\\r\\n    .container {\\r\\n      grid-template-columns: repeat(2, 1fr);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @media (max-width: 500px) {\\r\\n    .container {\\r\\n      grid-template-columns: 1fr;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .glassEffect {\\r\\n    border-radius: 20px;\\r\\n    backdrop-filter: blur(3px);\\r\\n    background-color: rgba(0, 0, 0, 0.495);\\r\\n    color: white;\\r\\n    box-shadow: 0px 0px 10px 5px rgba(96, 96, 96, 0.837);\\r\\n  }\\r\\n\\r\\n  .temperatureData {\\r\\n    display: grid;\\r\\n    justify-items: center;\\r\\n    padding: 20px;\\r\\n    width: 100%;\\r\\n    height: 250px;\\r\\n    margin-bottom: 1.5rem;\\r\\n  }\\r\\n\\r\\n  .areainfo {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    width: 100%;\\r\\n    font-weight: bold;\\r\\n    font-size: 1.2rem;\\r\\n  }\\r\\n\\r\\n  .temperature {\\r\\n    font-size: 6rem;\\r\\n  }\\r\\n\\r\\n  .temperature small {\\r\\n    font-size: 2rem;\\r\\n  }\\r\\n\\r\\n  .dayInfo {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    width: 100%;\\r\\n    font-weight: bold;\\r\\n    font-size: 1.2rem;\\r\\n  }\\r\\n\\r\\n  .table {\\r\\n    width: 100%;\\r\\n    text-align: center;\\r\\n    min-height: 350px;\\r\\n  }\\r\\n\\r\\n  .section-1 table{\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  .table th,\\r\\n  .table td {\\r\\n    text-align: center;\\r\\n    border: none;\\r\\n    padding: 10px;\\r\\n  }\\r\\n\\r\\n  .otherData {\\r\\n    display: grid;\\r\\n    grid-template-columns: repeat(2, 1fr);\\r\\n    gap: 1em;\\r\\n  }\\r\\n\\r\\n  .datacard {\\r\\n    width: 210px;\\r\\n    min-height: 130px;\\r\\n    padding: 10px;\\r\\n  }\\r\\n\\r\\n  h4 {\\r\\n    font-size: 1.5rem;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n\\r\\n  .data {\\r\\n    font-size: 2rem;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n\\r\\n  .data small {\\r\\n    font-size: 1rem;\\r\\n  }\\r\\n\\r\\n  .container .section-3 .table {\\r\\n  width: 100%;\\r\\n  max-height: 400px; /* Set a max height */\\r\\n  overflow-y: scroll; /* Enable vertical scrolling */\\r\\n}\\r\\n\\r\\n.container .section-3 .table tbody {\\r\\n  display: block; /* Ensure table body can scroll */\\r\\n  max-height: 600px; /* Match the table's max height */\\r\\n  overflow-y: scroll;\\r\\n  -ms-overflow-style: none;  /* IE and Edge */\\r\\n  scrollbar-width: none;  /* Firefox */\\r\\n}\\r\\n\\r\\n.container .section-3 .table tbody ::-webkit-scrollbar{\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n.container .section-3 .table thead,\\r\\n.container .section-3 .table tbody tr {\\r\\n  display: table;\\r\\n  width: 100%;\\r\\n  table-layout: fixed;\\r\\n}\\r\\n\\r\\n.circular-clock {\\r\\n  width: 150px;\\r\\n  height: 150px;\\r\\n  display: block;\\r\\n  margin: 0 auto;\\r\\n}\\r\\n\\r\\n.circular-compass {\\r\\n  width: 150px;\\r\\n  height: 150px;\\r\\n  display: block;\\r\\n  margin: 0 auto;\\r\\n}\\r\\n\\r\\n\\r\\n</style>"],"names":[],"mappings":"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"}`
};
function formatTime(number) {
  return number.toString().padStart(2, "0");
}
function getWindDirectionAngle(direction) {
  const directions = {
    "N": 0,
    "NNE": 22.5,
    "NE": 45,
    "ENE": 67.5,
    "E": 90,
    "ESE": 112.5,
    "SE": 135,
    "SSE": 157.5,
    "S": 180,
    "SSW": 202.5,
    "SW": 225,
    "WSW": 247.5,
    "W": 270,
    "WNW": 292.5,
    "NW": 315,
    "NNW": 337.5
  };
  return directions[direction] || 0;
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { data } = $$props;
  let { weatherData, error } = data;
  const weekDay = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  function formatDate(date) {
    const day = date.slice(8);
    const month = monthNames[new Date(date).getMonth()];
    return `${day} ${month}`;
  }
  function getDayOfWeek(date) {
    return weekDay[new Date(date).getDay()];
  }
  let hours = 0;
  let minutes = 0;
  let seconds = 0;
  const updateClock = () => {
    const now = /* @__PURE__ */ new Date();
    hours = formatTime(now.getHours() % 12 || 12);
    minutes = formatTime(now.getMinutes());
    seconds = formatTime(now.getSeconds());
  };
  setInterval(updateClock, 1e3);
  updateClock();
  let windDirection = 0;
  if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
  $$result.css.add(css);
  windDirection = getWindDirectionAngle(weatherData.current.wind_dir);
  return `<div class="container svelte-sw4uo1">${error ? `<p class="svelte-sw4uo1">${escape(error)}</p>` : `<div class="section-1 svelte-sw4uo1"><div class="temperatureData glassEffect svelte-sw4uo1"><div class="areainfo svelte-sw4uo1"><span class="location svelte-sw4uo1">${escape(weatherData.location.name)}, ${escape(weatherData.location.country)}</span> <span class="date svelte-sw4uo1">${escape(getDayOfWeek(weatherData.forecast.forecastday[0].date))}</span></div> <h1 class="temperature svelte-sw4uo1">${escape(weatherData.current.temp_c)} <small class="svelte-sw4uo1" data-svelte-h="svelte-osy4pn">°C</small></h1> <div class="dayInfo svelte-sw4uo1"><span class="svelte-sw4uo1">${escape(weatherData.current.is_day ? "Day" : "Night")}</span> <span class="condition svelte-sw4uo1">${escape(weatherData.current.condition.text)}</span></div></div>  <table class="table forecast-table glassEffect svelte-sw4uo1"><thead class="svelte-sw4uo1" data-svelte-h="svelte-6b08mh"><tr class="svelte-sw4uo1"><th class="svelte-sw4uo1">Date</th> <th class="svelte-sw4uo1">Temp</th> <th class="svelte-sw4uo1">Sunrise</th></tr></thead> <tbody class="svelte-sw4uo1">${each(weatherData.forecast.forecastday, (day) => {
    return `<tr class="svelte-sw4uo1"><td class="svelte-sw4uo1">${escape(formatDate(day.date))}</td> <td class="svelte-sw4uo1">${escape(day.day.avgtemp_c)}°C</td> <td class="svelte-sw4uo1">${escape(day.astro.sunrise)}</td> </tr>`;
  })}</tbody></table></div>  <div class="section-3 svelte-sw4uo1"><table class="table forecast-table glassEffect svelte-sw4uo1"><thead class="svelte-sw4uo1" data-svelte-h="svelte-1xsx11h"><tr class="svelte-sw4uo1"><th class="svelte-sw4uo1">Time</th> <th class="svelte-sw4uo1">Temp</th> <th colspan="2" class="svelte-sw4uo1">Condition</th></tr></thead> <tbody class="svelte-sw4uo1">${each(weatherData.forecast.forecastday[0].hour, (hour) => {
    return `<tr class="svelte-sw4uo1"><td class="svelte-sw4uo1">${escape(hour.time.slice(11))}</td> <td class="svelte-sw4uo1">${escape(hour.temp_c)}°C</td> <td colspan="2" class="svelte-sw4uo1">${escape(hour.condition.text)}</td> </tr>`;
  })}</tbody></table></div> <div class="section-2 svelte-sw4uo1"><div class="otherData svelte-sw4uo1"><div class="datacard text-center glassEffect svelte-sw4uo1"><div class="clock svelte-sw4uo1"><h4 class="svelte-sw4uo1">${escape(hours)} : ${escape(minutes)} : ${escape(seconds)}</h4> <svg viewBox="0 0 100 100" class="circular-clock svelte-sw4uo1"><circle cx="50" cy="50" r="45" stroke-width="5" fill="none" stroke="white" class="svelte-sw4uo1"></circle><line x1="50" y1="50"${add_attribute("x2", 50 + 20 * Math.sin(hours * 30 * Math.PI / 180), 0)}${add_attribute("y2", 50 - 20 * Math.cos(hours * 30 * Math.PI / 180), 0)} stroke="white" stroke-width="3" class="svelte-sw4uo1"></line><line x1="50" y1="50"${add_attribute("x2", 50 + 30 * Math.sin(minutes * 6 * Math.PI / 180), 0)}${add_attribute("y2", 50 - 30 * Math.cos(minutes * 6 * Math.PI / 180), 0)} stroke="white" stroke-width="2" class="svelte-sw4uo1"></line><line x1="50" y1="50"${add_attribute("x2", 50 + 40 * Math.sin(seconds * 6 * Math.PI / 180), 0)}${add_attribute("y2", 50 - 40 * Math.cos(seconds * 6 * Math.PI / 180), 0)} stroke="red" stroke-width="1" class="svelte-sw4uo1"></line><circle cx="50" cy="50" r="2" fill="red" class="svelte-sw4uo1"></circle></svg></div></div> <div class="datacard text-center glassEffect svelte-sw4uo1"><div class="compass svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-wzt5yl">Wind Direction</h4> <svg viewBox="0 0 100 100" class="circular-compass svelte-sw4uo1"><circle cx="50" cy="50" r="45" stroke-width="5" fill="none" stroke="white" class="svelte-sw4uo1"></circle><text x="50" y="15" text-anchor="middle" fill="white" font-size="8" class="svelte-sw4uo1">N</text><text x="85" y="55" text-anchor="middle" fill="white" font-size="8" class="svelte-sw4uo1">E</text><text x="50" y="95" text-anchor="middle" fill="white" font-size="8" class="svelte-sw4uo1">S</text><text x="15" y="55" text-anchor="middle" fill="white" font-size="8" class="svelte-sw4uo1">W</text><line x1="50" y1="50" x2="50" y2="15" stroke="red" stroke-width="2" transform="${"rotate(" + escape(windDirection, true) + " 50 50)"}" class="svelte-sw4uo1"></line><circle cx="50" cy="50" r="2" fill="red" class="svelte-sw4uo1"></circle></svg></div></div>  <div class="datacard text-center glassEffect svelte-sw4uo1"><div class="wind svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-19vv2ar">Wind Speed</h4> <span class="data svelte-sw4uo1">${escape(weatherData.current.wind_kph)} <small class="svelte-sw4uo1" data-svelte-h="svelte-1sgkr3d">km/h</small></span></div></div>  <div class="datacard text-center glassEffect svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-ykh0a7">Humidity</h4> <span class="data svelte-sw4uo1">${escape(weatherData.current.humidity)}<small class="svelte-sw4uo1" data-svelte-h="svelte-1rszlrh">%</small></span></div>  <div class="datacard text-center glassEffect svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-avxvti">Visibility</h4> <span class="data svelte-sw4uo1">${escape(weatherData.current.vis_km)} <small class="svelte-sw4uo1" data-svelte-h="svelte-1fmls2c">km</small></span></div>  <div class="datacard text-center glassEffect svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-1hszs1r">Precipitation</h4> <span class="data svelte-sw4uo1">${escape(weatherData.current.precip_mm)} <small class="svelte-sw4uo1" data-svelte-h="svelte-1jrd3te">mm</small></span></div>  <div class="datacard text-center glassEffect svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-opqifx">Pressure</h4> <span class="data svelte-sw4uo1">${escape(weatherData.current.pressure_mb)} <small class="svelte-sw4uo1" data-svelte-h="svelte-u4v42h">mb</small></span></div>  <div class="datacard text-center glassEffect svelte-sw4uo1"><h4 class="svelte-sw4uo1" data-svelte-h="svelte-1rbm2d2">🌤️Sunrise</h4> <span class="data svelte-sw4uo1">${escape(weatherData.forecast.forecastday[0].astro.sunrise.slice(0, 5))} <small class="svelte-sw4uo1">${escape(weatherData.forecast.forecastday[0].astro.sunrise.slice(5))}</small></span></div></div></div>`} </div>`;
});
export {
  Page as default
};
